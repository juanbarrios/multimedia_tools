/*
 * Copyright (C) 2012-2015, Juan Manuel Barrios <http://juan.cl/>
 * All rights reserved.
 *
 * This file is part of P-VCD. http://p-vcd.org/
 * P-VCD is made available under the terms of the BSD 2-Clause License.
 */
package org.p_vcd.model;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.prefs.Preferences;

import org.apache.commons.io.FileUtils;

public class Parameters {

	private static Parameters internal = null;

	public static synchronized Parameters get() {
		if (internal == null)
			throw new RuntimeException("Parameters not loaded");
		return internal;
	}

	public static synchronized void loadParameters(int bitness, File iniFile)
			throws Exception {
		internal = new Parameters(bitness, iniFile);
	}

	public static final String VERSION_NAME = "{VERSION_NAME}";
	public final int BITNESS;
	public final File USER_DATA_DIR;
	public final File DATABASES_DIR, QUERIES_DIR, SEARCHES_DIR, DOWNLOADS_DIR;
	public final File PVCD_DIR;
	public final File VLC_BIN, VLC_LIB;
	public final File WGET_BIN, YOUTUBE_DL_BIN;
	public final File LICENSES_DIR;
	public final int MAX_CORES;
	public final String[] VIDEO_EXTENSIONS;
	public final String[] IMAGE_EXTENSIONS;
	public final String[] IMAGE_AND_VIDEO_EXTENSIONS;
	private File defaultDir_DatabaseFiles, defaultDir_QuerySelection;

	private Parameters(int bitness, File iniFile) throws Exception {
		BITNESS = bitness;

		ConfigFile cfg = new ConfigFile(iniFile);
		USER_DATA_DIR = cfg.getFile("userdata.dir");

		if (!USER_DATA_DIR.exists() || !USER_DATA_DIR.isDirectory()) {
			FileUtils.forceMkdir(USER_DATA_DIR);
			File readme = new File(USER_DATA_DIR, "README.txt");
			if (!readme.exists()) {
				String l1 = "This directory contains data generated by P-VCD.";
				String l2 = "You can move it to other destination by modifying th P-VCD ini file.";
				FileUtils.writeLines(readme,
						Arrays.asList(new String[] { l1, l2 }));
			}
		}
		setGlobalLogFile(new File(USER_DATA_DIR, "console.log"));
		System.out.println(MyUtil.getFormateDate() + "Starting P-VCD ...");

		DATABASES_DIR = new File(USER_DATA_DIR, "databases-data");
		QUERIES_DIR = new File(USER_DATA_DIR, "queries-data");
		SEARCHES_DIR = new File(USER_DATA_DIR, "searches-data");
		DOWNLOADS_DIR = new File(USER_DATA_DIR, "download-files");

		PVCD_DIR = cfg.getFile("pvcd.dir");
		LICENSES_DIR = cfg.getFile("licenses.dir");
		VLC_BIN = cfg.getFile("3rd_party.vlc.bin");
		VLC_LIB = cfg.getFile("3rd_party.vlc.lib");
		int vlc_bitness = cfg.getInt("3rd_party.vlc.bitness");
		WGET_BIN = cfg.getFile("3rd_party.wget.bin");
		YOUTUBE_DL_BIN = cfg.getFile("3rd_party.youtube-dl.bin");

		if (vlc_bitness != BITNESS)
			throw new UnsatisfiedLinkError(
					"VideoLAN library (" + bitness 
							+ " bits) does not match JVM version (" + bitness 
							+ " bits). Please download and configure the correct VideoLAN player for your system.");

		assertFileExist(PVCD_DIR, LICENSES_DIR, VLC_BIN, VLC_LIB, WGET_BIN, YOUTUBE_DL_BIN);

		int numThreads = cfg.getInt("max_cores.int");
		if (numThreads <= 0) {
			try {
				String val = System.getenv("NUMBER_OF_PROCESSORS");
				if (val != null)
					numThreads = Integer.parseInt(val, 10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		MAX_CORES = Math.min(Math.max(numThreads, 1), 64);

		String videoExts = "mp4,mpg,avi,mov,flv,mkv,wmv,webm,ogv";
		String imgsExts = "png,jpg,jpeg,gif,bmp,pgm,ppm";
		this.VIDEO_EXTENSIONS = videoExts.split(",");
		this.IMAGE_EXTENSIONS = imgsExts.split(",");
		this.IMAGE_AND_VIDEO_EXTENSIONS = (videoExts + "," + imgsExts)
				.split(",");
		this.defaultDir_DatabaseFiles = getParameterFile("DefaultDir.DatabaseFiles");
		this.defaultDir_QuerySelection = getParameterFile("DefaultDir.QuerySelection");

	}

	private static void assertFileExist(
			File... args) throws Exception {
		for (File file : args) {
			if (!file.exists()) {
				throw new FileNotFoundException("Could not find file " + file.toString());
			}
		}
	}

	private static void setGlobalLogFile(File logFile) throws Exception {
		PrintStream newOut = new PrintStream(new BufferedOutputStream(
				new FileOutputStream(logFile, true)), true);
		System.setOut(newOut);
		System.setErr(newOut);
	}

	public File getDefaultDir_DatabaseFiles() {
		return defaultDir_DatabaseFiles;
	}

	public File getDefaultDir_QuerySelection() {
		return defaultDir_QuerySelection;
	}

	/* SETTERS ******************** */
	public synchronized void setDefaultDir_DatabaseFiles(File dir) {
		setParameterFile("DefaultDir.DatabaseFiles", dir);
		this.defaultDir_DatabaseFiles = dir;
	}

	public synchronized void setDefaultDir_QuerySelection(File dir) {
		setParameterFile("DefaultDir.QuerySelection", dir);
		this.defaultDir_QuerySelection = dir;
	}

	/* PRIVATES ******************** */
	private Preferences getUserPreferences() {
		// under HKEY_LOCAL_MACHINE/software/JavaSoft/Prefs
		// under HKEY_CURRENT_USER/software/JavaSoft/Prefs
		return Preferences.userRoot().node("PVCD.gui");
	}

	private File getParameterFile(String keyname) {
		Preferences pref = getUserPreferences();
		String value = pref.get(keyname, null);
		return (value == null) ? null : new File(value);
	}

	private void setParameterFile(String keyname, File dir) {
		Preferences pref = getUserPreferences();
		if (dir == null)
			pref.remove(keyname);
		else
			pref.put(keyname, dir.getAbsolutePath());
	}

}
